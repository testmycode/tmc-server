#!/usr/bin/env ruby
# frozen_string_literal: true

require 'rubygems'
require 'fileutils'
require_relative '../config/environment'
require 'background_task_registry'

root_dir = File.expand_path('../', File.dirname(__FILE__))
pid_dir = root_dir + '/tmp/pids'
log_dir = root_dir + '/log'
FileUtils.mkdir_p(pid_dir)
FileUtils.mkdir_p(log_dir)

def exception_to_str(e)
  e.message + "\n" + e.backtrace.join("\n        from ")
end

Dir.chdir root_dir
require root_dir + '/config/environment'
Rails.logger = Logger.new(Rails.root.join('log', 'background_daemon.log'))
Rails.logger.auto_flushing = true if Rails.logger.respond_to? :auto_flushing=
Rails.logger.info 'Starting background_daemon'
# ActiveRecord::Base.connection_config[:pool] = 25

# Tasks may be longrunning so we want each one in a thread so one task won't
# block other ones.
processes = BackgroundTaskRegistry.all_tasks.map do |task|
  Process.fork do
    loop do
      begin
        task.run
      rescue StandardError => e
        Rails.logger.error "#{task.class.name} exception: " + exception_to_str(e)

        begin
          ActiveRecord::Base.connection_handler.clear_active_connections!
        rescue StandardError => e2
          Rails.logger.error 'Failed to get rid of used db connections: ' + exception_to_str(e2)
        end
      end
      sleep task.wait_delay
    end
  end
end
# TODO: we may not detect if only one of the threads dies.
processes.each do |pid|
  Process.wait(pid)
end
