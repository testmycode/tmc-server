<!DOCTYPE html>
<!-- NOTE: doc/usermanual/pages is autogenerated from spec/usermanual -->
<html>
<head>
  <%
  #TODO: get rid of header/layout duplication
  %>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>TMC webapp user manual - admin</title>

  <link rel="stylesheet" type="text/css" href="../css/usermanual.css" />
  <link rel="stylesheet" type="text/css" href="../lib/shjs/sh_style.css" />

  <script type="text/javascript" src="../lib/jquery-1.7.1.min.js"></script>
  <script type="text/javascript" src="../lib/shjs/sh_main.min.js"></script>
  <script type="text/javascript" src="../lib/shjs/sh_java.min.js"></script>
  <script type="text/javascript" src="../js/toc.js"></script>

  <script type="text/javascript">
    $(document).ready(function() {
      sh_highlightDocument();
      $('#toc').prepend('<h2>Contents</h2>');
      makeToc($('#toc'));
    });
  </script>
</head>
<body>

<%
require 'cgi' # for escapeHTML
%>

  <%
    FactoryGirl.create(:admin, :login => 'admin', :password => 'admin')
    FactoryGirl.create(:course_template)
    FactoryGirl.create(:course_template)
    FactoryGirl.create(:course_template)
  %>

  <h1>Admin Manual</h1>

  <div id="toc"></div>

  <p>
    Administrators have exclusive use cases for the TMC webapp, that need to be practiced.
    This page will list these use cases.
  </p>

  <h2>Course templates</h2>

  <p>
    Simplest way to create a course is to copy it from a template. This way teacher won't
    have to create new repositories from which new course will be based off. One of the biggest
    responsibilities for an administrator is managing these templates in TMC webapp.
  </p>

  <p>
    When logged in as administrator, visiting <code>/course_templates</code> will bring you here:
  </p>

<%
   visit '/'
   fill_in 'session_login', :with => 'admin'
   fill_in 'session_password', :with => 'admin'
   click_on 'Sign in'
   visit '/course_templates'
   highlight 'a:contains("New Course template")'
%>
<%= screenshot %>

  <p>
    This page lists all course templates in the database with their relevant information.
    By clicking 'New Course template' you can create a new template through this form:
  </p>

<%
  repo_path = "#{::Rails.root}/tmp/tests/fake_remote_repo"
  create_bare_repo(repo_path)

  click_on 'New Course template'
  fill_in 'course_template_name', with: 'newtemplate'
  fill_in 'course_template_title', with: 'New Template'
  fill_in 'course_template_description', with: 'Short description'
  fill_in 'course_template_material_url', with: 'www.material.com'
  fill_in 'course_template_source_url', with: repo_path
  highlight '#course_template_name'
  highlight '#course_template_title'
  highlight '#course_template_source_url'
  highlight '#course_template_git_branch'
%>
<%= screenshot %>

  <p>
    Highlighted fields are required and can't be left blank. Explanation for each field:
    <ul>
      <li>Courses are shown by <b>Name</b> in IDE plugins (such as NetBeans). Name can't contain whitespaces.</li>
      <li><b>Title</b> is a prettier version of the name that may contain whitespaces, and is shown on webapp pages.</li>
      <li><b>Description</b> is a short piece of text to show when browsing this particular course.</li>
      <li>
        <b>Material url</b> takes user to the online resource that educates and helps the course participant with solving
        the course exercises.
      </li>
      <li>
        <b>Source url</b> is a remote repository from which student will pull exercises as source files.
        When this field is edited, TMC webapp will validate the url by attempting to clone the repository from the url.
        You can find information on how to create a course repository by yourself from this <a href="customcourse.html#starting_from_a_template">guide</a>.
      </li>
      <li>
        <b>Git branch</b> is the name of the branch which combined with source url defines the actual result of the repository cloning.
        Default value is master.
      </li>
      <li>
        After the <b>Expires at</b> date no courses can be cloned from the expired template. Expiration date will not affect courses
        that were cloned before the expiration date.
      </li>
    </ul>
  </p>

  <p>
    All of these fields except for <b>Source url</b>, <b>Git branch</b> and <b>Expires at</b> may be changed by the teacher during the course copying process
    to suit their needs.
  </p>

  <p>After clicking 'Create course template', TMC will show the list of all templates again.</p>

<%
   click_on 'Create Course template'
   visit '/course_templates'
   expect(page).to have_content('newtemplate')
   highlight 'a:contains("Refresh"):last'
   highlight 'a:contains("hide"):last'
   highlight 'a:contains("Edit"):last'
%>
<%= screenshot %>

  <p>
    Whenever any changes to the remote repository are made (new exercises added, exercises removed, etc),
    the course template that uses that repository needs to be refreshed. After clicking 'Refresh', all courses
    created from the template will be up-to-date. This operation takes some time.
  </p>

  <p>
    Course template default fields may be edited at any time by administrator via link 'Edit'. Expiration date
    may be changed through the same link.
  </p>

  <p>
    Course templates may be hidden instead of being destroyed. Hidden templates will not be available for copying
    as if they were destroyed, even though the template still exists in the database.
  </p>

  <h2>Accepting pending organizations</h2>

  <p>
    Another responsibility for administrators is to manage pending organization requests, accepting or denying them
    as they see fit. Anyone can make an organization request, so they should be accepted through careful consideration.
  </p>

  <p>Administrator will see this notice on the front page when a new organization is requested:</p>

<%
  FactoryGirl.create :accepted_organization, name: 'Some organization', information: 'Some information'
  FactoryGirl.create :user, login: 'user', password: 'user'

  click_on 'Sign out'
  fill_in 'session_login', with: 'user'
  fill_in 'session_password', with: 'user'
  click_on 'Sign in'

  visit '/'
  click_link 'Request a new organization'
  fill_in 'organization[name]', with: 'Helsingin yliopisto'
  fill_in 'organization[information]', with: 'University life'
  fill_in 'organization[slug]', with: 'hy'
  click_button 'Request organization'
  expect(page).to have_content 'Organization was successfully requested.'

  click_on 'Sign out'
  fill_in 'session_login', with: 'admin'
  fill_in 'session_password', with: 'admin'
  click_on 'Sign in'
  visit '/'
  highlight 'a:contains("Show")'
%>
<%= screenshot %>

  <p>
    Clicking 'show' will list all pending organization requests.
  </p>

<%
  click_on 'Show'
  highlight 'a:contains("Accept")'
%>
<%= screenshot %>
<%
  click_on 'Accept'
  expect(page).to have_content 'Organization request was successfully accepted.'
%>
<%= screenshot %>

  <p>
    After clicking 'Accept', organization requester is promoted as organization's teacher and obtains rights to manage it.
  </p>
<%
  visit '/'
%>
<%= screenshot %>

<p>
  Alternatively, after clicking 'Reject', administrator must fill a form to give a reason for rejection.
</p>

<%
  Organization.find_by(slug: 'hy').destroy!
  click_on 'Sign out'
  fill_in 'session_login', with: 'user'
  fill_in 'session_password', with: 'user'
  click_on 'Sign in'

  visit '/'
  click_link 'Request a new organization'
  fill_in 'organization[name]', with: 'Helsingin yliopisto'
  fill_in 'organization[information]', with: 'University life'
  fill_in 'organization[slug]', with: 'hy'
  click_button 'Request organization'
  expect(page).to have_content 'Organization was successfully requested.'

  click_on 'Sign out'
  fill_in 'session_login', with: 'admin'
  fill_in 'session_password', with: 'admin'
  click_on 'Sign in'
  visit '/'

  click_on 'Show'
  highlight 'a:contains("Reject")'
%>
<%= screenshot %>

<%
   click_on 'Reject'
   fill_in 'organization_rejected_reason', with: 'No such university exists, you can\'t fool me!'
%>
<%= screenshot %>
<%
  click_on 'Reject organization'
  expect(page).to have_content 'Organization request was successfully rejected.'
%>
<%= screenshot %>

<p>Requested organization will not be shown anywhere in the front page after rejection.</p>

<%
  visit '/'
%>
<%= screenshot %>

</body>
</html>
