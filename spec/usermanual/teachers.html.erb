<!DOCTYPE html>
<!-- NOTE: doc/usermanual/pages is autogenerated from spec/usermanual -->
<html>
<head>
  <%
  #TODO: get rid of header/layout duplication
  %>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>TMC user manual - teacher</title>

  <link rel="stylesheet" type="text/css" href="css/usermanual.css" />
  <link rel="stylesheet" type="text/css" href="lib/shjs/sh_style.css" />

  <script type="text/javascript" src="lib/jquery-1.7.1.min.js"></script>
  <script type="text/javascript" src="lib/shjs/sh_main.min.js"></script>
  <script type="text/javascript" src="lib/shjs/sh_java.min.js"></script>
  <script type="text/javascript" src="js/toc.js"></script>

  <script type="text/javascript">
    $(document).ready(function() {
      sh_highlightDocument();
      $('#toc').prepend('<h2>Contents</h2>');
      makeToc($('#toc'));
    });
  </script>
</head>
<body>

<%
require 'cgi' # for escapeHTML
%>

  <%
    FactoryGirl.create :user, login: 'teacher', password: 'teacher'
    FactoryGirl.create :user, login: 'professor', password: 'professor'
    FactoryGirl.create :user, login: 'oldassistant', password: 'oldassistant'
    FactoryGirl.create :admin, login: 'admin', password: 'admin'
    FactoryGirl.create :accepted_organization, name: 'Some organization', information: 'Some information'

    repo_path = "#{::Rails.root}/tmp/tests/fake_remote_repo"
    create_bare_repo(repo_path)
    clone_path = repo_path + '-wc'
    clone_repo(repo_path, clone_path)
    repo = GitRepo.new(clone_path)
    repo.copy_simple_exercise('Week1/HelloWorld')
    repo.copy_simple_exercise('Week1/SimpleExercise')
    repo.copy_simple_exercise('Week2/HelloWorldAdvanced')
    repo.add_commit_push

    FactoryGirl.create :course_template, name: 'prog101', title: 'Programming 101', source_url: repo_path
    FactoryGirl.create :course_template, name: 'prog102', title: 'Programming 102', source_url: repo_path
    FactoryGirl.create :course_template, name: 'skynet', title: 'Skynet laboratory', source_url: repo_path
  %>

  <h1>Teacher Manual</h1>

  <div id="toc"></div>

  <h2>Overview</h2>
  <p>
    Teacher is a user that controls his own organization. Organization can have several teachers, and they all can
    create and manage courses. One teacher can also belong to several organizations.
  </p>

  <p>
    As a teacher, you can create fully functional courses from available templates. You can customize exercise sets,
    their deadlines and unlock conditions etc. Courses can also have customized feedback questions which can be asked
    from students after successful submission.
  </p>

  <p>
    Courses can also have course assistants, who have partial teachership permissions for that course only, not for all
    organization's courses.
  </p>

  <h2>Creating organization</h2>

  <p>
    When you are starting to use TMC for your own teaching first time, first step is to create your own organization.
    If your organization is big, it's good to check from the front page if the organization already exists in the system.
    If it is already found, you should contact the other teachers and ask them to promote you as teacher in the
    existing organization.
  </p>

  <p>
    First you have to be logged in the system normally. If needed, click the <i>Sign up</i> link and create your personal
    account. When logged in, go to url </i>/org/new</i> in the TMC system,
    (for example http://tmc.mooc.fi/org/new).
  </p>

<%
  visit '/'
  fill_in 'session_login', with: 'teacher'
  fill_in 'session_password', with: 'teacher'
  click_on 'Sign in'
%>
<%
  visit '/org/new'
  fill_in 'organization_name', with: 'Helsingin yliopisto'
  fill_in 'organization_information', with: 'University life'
  fill_in 'organization_slug', with: 'hy'
  fill_in 'organization_contact_information', with: 'Matti Meikäläinen'
  fill_in 'organization_phone', with: '+3584012345678'
  fill_in 'organization_email', with: 'matti@meikalainen.fi'
  highlight 'a:contains("Create Organization")'
%>
<%= screenshot %>

  <p>
    You will then be presented with a form with following fields:
    <ul>
      <li><b>Name</b> of the organization that will be seen in the app</li>
      <li><b>Description</b> about your organization, seen in this organization's page</li>
      <li><b>Logo</b> for your organization, seen in this organization's page (you can change this and other fields above later)</li>
      <li><b>Organization ID</b>, a short word that will be part of your organization's url. You will have an opportunity to preview organization's url</li>
    </ul>
  </p>

  <p>
    Contact details for tmc administrative purposes. These are not shown publicly.
    <ul>
      <li><b>Contact person name</b>, who is responsible for this organization. Also some more specific information can be included</li>
      <li><b>Phone number</b> for the contact person</li>
      <li><b>Email</b> for the contact person</li>
    </ul>
  </p>

<%
  click_on 'Create Organization'
  expect(page).to have_content("Organization was successfully created.")
%>
<%= screenshot %>

  <p>
    When you have successfully created organization, it is ready for use. Only few functionalities, like model answers,
    are not available until administrators have verified the organization. When logged in, your organization is listed
    separately on TMC front page. Verified organizations are also publicly listed.
  </p>

<%
  visit '/'
  click_on 'Sign out'
  fill_in 'session_login', with: 'admin'
  fill_in 'session_password', with: 'admin'
  click_on 'Sign in'

  click_on 'Show'
  click_on 'Verify'
  expect(page).to have_content 'Organization is now verified.'

  visit '/'
  click_on 'Sign out'
  fill_in 'session_login', with: 'teacher'
  fill_in 'session_password', with: 'teacher'
  click_on 'Sign in'

  highlight 'a:contains("Helsingin yliopisto")'
%>
<%= screenshot %>

  <h2>Adding new teachers</h2>

  <p>As a teacher, you can list, add and remove teachers in your organization. From the organization front page,
    you can find link to list all the teachers. Remember that all teachers in the organization have same access
    rights as you, so be careful when adding new teachers.
  </p>

<%
  page.first(:link, "Helsingin yliopisto").click
  highlight 'a:contains("Show teachers in this organization")'
%>
<%= screenshot %>

<%
   click_on 'Show teachers in this organization'
%>

  <p>
    To recruit a new teacher, you will have to know the teachers's exact username in TMC system. Type the username
    then click 'Add a new teacher'.
  </p>

<%
   fill_in 'username', with: 'professor'
   highlight '[value="Add a new teacher"]'
%>
<%= screenshot %>

<p>
  You can also remove existing teachers easily by clicking 'Remove' buttons.
</p>

<%
   click_on 'Add a new teacher'
   highlight 'a:contains("Remove")'
%>
<%= screenshot %>

  <h2>Creating a course</h2>

  <p>
    TMC offers fully working course templates, from which you can create your own courses. Courses will include
    teaching material and set of exercises. You can customize your own course by managing susbmission deadlines,
    exercise unlock conditions, feedback answers etc.
  </p>

  <p>
    From organization's front page, click 'Create New Course'
  </p>

<%
  visit '/org/hy'
  highlight 'a:contains("Create New Course")'
%>
<%= screenshot %>

  <p>
    You will see a list of all the course templates TMC has to offer. If needed, take a look at the course description
    and course material, to choose which course is suitable for your needs. Click 'Create Course' button on the course
    that you want.
  </p>

<%
  click_on 'Create New Course'
  highlight 'a:contains("Create Course")'
%>
<%= screenshot %>

<%
  first(:link, 'Create Course').click
%>
<%= screenshot %>

  <p>
    On the following form the fields will be prefilled with template defaults.
    You may change these fields to suit your needs.
    <ul>
      <li>
        Course <b>Name</b> is technical name, which is shown in IDE plugins (such as NetBeans) and
        in directory structures. Name can't contain whitespaces. This can't be changed later.
      </li>
      <li><b>Title</b> is a prettier version of the name that may contain whitespaces, and is shown on TMC pages.</li>
      <li><b>Description</b> is place for short information about the course.</li>
      <li>
        <b>Material url</b> is the link to the course material, which is the main learning source for the students.
        Material should include the exercises too, and normally it's wise to use course's own material, even though
        it's possible to create also your own.
      </li>
    </ul>
  </p>

  <p>
    Finally click the 'Add Course' button. It might take some time while the TMC populates the new course with
    exercices.
  </p>

<%
  click_on 'Add Course'
  highlight 'a:contains("View status page")'
%>
<%= screenshot %>

  <p>
    After the course has been created, you will get message announcing that. Now the course
    should now be available for students to submit their solutions to exercises.
    TMC will show a help page to get you started with teaching the course. Click 'view status page' to return
    to course's front page, where you can manage course details.
  </p>

  <p>
    Here you may see submissions sent to any exercises in this course, view model solutions, make code reviews etc. You may also access
    course page from organization's page.
  </p>

  <p>
    Course main page is divided into few sections. First, you have the general management part, which contains links to
    exercise, deadline, unlock, assistant and course option management. After that, there is the exercise list,
    and at the bottom, you can find student's submissions. Remember, that as a teacher (or assistant), you will see
    submissions from all the students, while students see only their own submissions.
  </p>

<%
   click_on 'View status page'
%>
<%= screenshot %>

  <h2>Editing course details</h2>

  <p>
    You can edit the initially entered course information plus some other things by clicking the 'Edit course parameters'
    button.
  </p>

  <p>Technical course name is permanent, and it can't be edited.</p>

<%
   visit '/org/hy'
   highlight 'a:contains("Programming 101")'
   click_on 'Programming 101'
   click_on 'Edit course parameters'
   fill_in 'course_external_scoreboard_url', with: 'http://my-points.io/%{user}'
%>
<%= screenshot %>

<h3>External score board</h3>

<p>
  If you want to use an external point awarding system, you can enter its URL to the 'Custom points URL' field. You can also use a template
  string that will generate the URL dynamically. For example, <code style='white-space: nowrap'>http://my-custom-points.io/%{user}</code> would show as
  <code style='white-space: nowrap'>http://my-custom-points.io/MyUsername</code> when viewed by user <code>MyUsername</code>
  If you want to use an external point awarding system, you can enter its URL to the 'External scoreboard URL' field. You can also use a template
  string that will generate the URL dynamically. For example, <code style='white-space: nowrap'>http://my-points.io/%{user}</code> would show as
  <code style='white-space: nowrap'>http://my-points.io/MyUsername</code> when viewed by user <code>MyUsername</code>
</p>

  <h2>Disabling course</h2>

  <p>
    Created course may be disabled so that it won't accept submissions. You might want to do this if you're not satisified
    with your course and wish to start a new one, if you want to configure your course without worrying about students using your course,
    or if you want to force students to take a vacation. Disabled courses can be enabled at a later time.
  </p>

<p>Simply click 'Disable Course' link to disable course.</p>

<%
   visit '/org/hy/courses/1'
   highlight 'a:contains("Disable Course")'
%>
<%= screenshot %>

<p>Click 'Enable Course' link to enable it again.</p>

<%
  click_on 'Disable Course'
  highlight 'a:contains("Enable Course")'
%>
<%= screenshot %>

<%
   click_on 'Enable Course'
%>

  <h2>Course assistants</h2>

<%
  visit '/org/hy/courses/1/assistants'
  fill_in 'username', with: 'oldassistant'
  click_on 'Add a new assistant'
  visit '/org/hy/courses/1/assistants'

%>

  <p>
    Course assistants have teacher permissions for single course, not for whole organization.
    You can add course assistants by going to course page and clicking 'Manage assistants' button.
  </p>

<%
   visit '/org/hy/courses/1'
   highlight 'a:contains("Manage assistants")'
%>
<%= screenshot %>

  <p>
    Adding new course assistants works same way as adding new teacher, so you need to enter assistant's username.
  </p>

<%
   click_on 'Manage assistants'
   fill_in 'username', with: 'assistant'
   highlight '[value="Add a new assistant"]'
%>
<%= screenshot %>

  <h2>Course progression</h2>

  <p>
    To control course progression, each exercise and exercise group may be configured with deadlines and unlock conditions.
    First, it's important to understand the concept of deadline and unlock condition.
  </p>

  <h3>Definitions</h3>

  <img src="../images/exercise_deadline_unlock.png" alt="Unlocks and deadlines for exercises">
  <h4>Deadlines</h4>

  <p>
    There are 2 kind of deadlines. <b>Soft deadline</b> is a deadline which is shown for students, but TMC will accept
    and process submissions even after that, only flagging that it's submitted late. <b>Hard deadline</b> is a strict
    deadline, so that when it is passed, TMC refuses to process any submissions.
  </p>

  <p>
    Choosing the deadlines depends on your needs. For example, you can set soft deadlines for every friday evening,
    and hard deadline for sunday evenings, to give students few days extra time, if thay fail to submit in time.
    Then you can take into account the late submissions in the grading, if needed.
  </p>

  <p>
    Deadlines can be either common time-based for all, or they can be unique unlock-based, so that student will
    always have exactly one week to submit. Then the exact deadline time will depend on the time where the exercise
    became available for the student.
  </p>

  <h4>Unlock conditions</h4>

  <p>
    Unlock condition is a condition, which determines when the exercise is available for the student. Two most common
    cases are fixed date, or some percentage of previous exercises completed. So unlock condition can be common for all,
    or unique for every student, based on their progress.
  </p>

  <h3>Setting deadlines</h3>

  <p>
    To setup deadlines for the exercises, click the 'Manage deadlines' button from the course's front page.
  </p>

<%
   visit '/org/hy/courses/1'
   highlight 'a:contains("Manage deadlines")'
%>
<%= screenshot %>

<%
   course = Course.find_by id: 1
   course.exercise_group_by_name('Week1').hard_group_deadline = ['01.01.2011'].to_json
   click_on 'Manage deadlines'
%>
<%= screenshot %>

  <p>
    Common deadlines are configured by date or date-time. TMC understands multiple formats, for example:
    <ul>
      <li>20.1.2000</li>
      <li>30.12.2000 20:00</li>
      <li>2000-1-20</li>
      <li>2000-12-30 20:00</li>
      <li>2000-12-30 8:00 PM</li>
    </ul>
  </p>

  <hr>

  <p>
    Another way to setup deadlines is to use unique unlock-based deadlines. It means that deadline for each
    student is based on the time they unlocked the exercise (see <a href="#unlock_conditions">Unlock conditions</a>).
    For example, to give students 2 weeks to complete an exercise after it becomes available, set the deadline to
    <code>unlock + 2 weeks</code>.
  </p>

  <p>
    All possible valuers for unlock-based deadline are:<br><br>
    <code>unlock + &lt;N&gt; [minute[s]|hour[s]|day[s]|week[s]|month[s]|year[s]]</code>.
  </p>

  <p>
    To edit unlock-based deadlines, advanced options must be enabled by clicking the button in the top right corner of the page.
    If both date-based and unlock-based deadlines are enabled for the same exercise, the one which expires first wil be used.
  </p>

  <hr>

  <p>
    Exercises are organized into pre-defined groups. By default, deadlines are set per group, so that all exercices in
    the current group will get the same deadline. If you need more customization, you can click 'Show single exercises',
    and then the form allows to set deadlines at single exercise level.
  </p>

<%
  highlight '#toggle1_Week1'
%>

<%= screenshot %>
<% click_on 'toggle1_Week1' %>
<%= screenshot %>

<%
   i = 1
   course.exercises.each do |e|
     e.deadline_spec = ["#{i}.1.2000"].to_json
     i += 1
     e.save!
   end
   visit '/org/hy/courses/1/manage_deadlines'
   disabled_text = find_field('group_Week1_hard_static', disabled: true).value
%>

  <p>
    If the exercises in a group have differing deadlines, the group deadline input fields will be disabled and show
    '<%= disabled_text %>', so you can't accidentally override exercise specific settings.
  </p>

<%= screenshot %>

  <p>
    If you want to edit the deadlines for the whole group again, you need to change the single deadlines so they all
    match within the group, or you can reset them by clicking 'Clear single deadlines'.
  </p>

<%
   click_on 'toggle1_Week1'
   highlight 'a:contains("Clear single deadlines")'
%>

<%= screenshot %>

  <p>When you are done with the settings, remember to click 'Save changes' at the bottom of the page.</p>

  <p>
    After creating a course from template, the deadlines may already be defined depending on the course template configuration.
  </p>

  <h3>Setting unlock conditions</h3>

  <p>
    If exercise or exercise group has an unlock condition attached to it and it has not passed yet, exercise will not
    accept submissions. If there are no unlocks set, exercise is always active.
  </p>

  <p>
    Unlock conditions can be set by clicking 'Manage unlock conditions' in the course page.
  </p>

<%
   course.exercise_group_by_name('Week1').hard_group_deadline = [''].to_json
   course.exercise_group_by_name('Week2').hard_group_deadline = [''].to_json
   visit '/org/hy/courses/1'
   highlight 'a:contains("Manage unlock conditions")'
%>
<%= screenshot %>

  <p>
    Unlock conditions may be set for each exercise group separately. You can add multiple unlock conditions for the same exercise group by clicking
    'Add a condition'. If multiple conditions are defined, all of them must be true before the exercise is unlocked.
  </p>

<%
   course.exercise_group_by_name('Week1').group_unlock_conditions = ['1.1.2000'].to_json
   course.exercise_group_by_name('Week2').group_unlock_conditions = ['8.1.2000', '80% of Week1'].to_json
   UncomputedUnlock.create_all_for_course_eager(course)
   click_on 'Manage unlock conditions'
   highlight '#add-condition-Week1'
%>

<%= screenshot %>

  <p>
    The conditions that can be used are:
    <ul>
      <li><code>exercise [group] &lt;exercise-or-group&gt;</code></li>
      <li><code>point[s] &lt;list-of-point-names&gt;</code></li>
      <li><code>&lt;N&gt;% [in|of|from] &lt;exercise-or-group&gt;</code></li>
      <li><code>&lt;N&gt; point[s] &lt;exercise-or-group&gt;</code></li>
      <li><code>&lt;N&gt; exercise[s] [in|of|from] &lt;exercise-or-group&gt;</code></li>
      <li><code>&lt;date-or-datetime&gt;</code></li>
    </ul>
  </p>

  <p><code>&lt;exercise-or-group&gt;</code> is the exact name for the exercise.</p>

  <p>
    Some most common examples:
    <ul>
      <li>
        Fixed date:<br>
        <code>1.9.2016</code>
      </li>
      <li>
        80% of the points from some precious week<br>
        <code>80% from exercice-group-X</code>
      </li>
      <li>
        Single important exercise made successfully<br>
        <code>exercise important-exercise</code>
      </li>
    </ul>
  </p>

  <h2>Code review</h2>

  <p>
    Code review is a process, where course teacher or assistant looks the code in the submitted answer, and
    reviews it with commenting. Some exercises require code review to be completed, and students can also
    request code review if they want.
  </p>
  <p>
    If there are any unreviewed requests, course front page has link 'n code view requested'.
    You can start review process by clicking that link. Also submission list on the bottom of the page shows
    individually if submission still requires review.
  </p>

<%
   student = FactoryGirl.create :user, login: 'student'
   course = Course.find(1)
   exercise1 = course.exercises.find_by(name: 'Week1-HelloWorld')
   submission = FactoryGirl.create :submission, course: course, user: student, exercise: exercise1, requests_review: true
   submission_data = FactoryGirl.create :submission_data, submission: submission
   available_point = FactoryGirl.create :available_point, exercise: exercise1
   available_point.award_to(student, submission)

   visit '/org/hy/courses/1/'
   highlight 'a:contains("Requested")'
   highlight 'a:contains("1 code review requested")'
%>
<%= screenshot %>

  <p>
    Review page shows all submission which still require review. Click the 'Requested' link for the submission which
    you want to review.
  </p>

<%
   click_on '1 code review requested'
   highlight 'a:contains("Requested")'

%>
<%= screenshot %>

  <p>
    On the actual review screen, you can see studens answer code at the bottom of the page. Showing test results
    can be toggled by clicking 'Test results'. When you have taken look at the code, click 'Start code review'
    to start writing your actual review feedback.
  </p>

<%
   click_on 'Requested'
   highlight 'button:contains("Start code review")'

%>
<%= screenshot %>

  <p>
    Write you review text in the textarea. If you want to notify the student by email, you can check 'Notify
    by e-mail' checkbox. When you are ready, click 'Save review', and review process is done.
  </p>

<%
   click_on 'Start code review'
   fill_in 'review_review_body', with: 'Code looks ok but you could...'
   highlight 'label:contains("Notify by e-mail")'
   highlight 'button:contains("Save review")'
   sleep 1      # to prevent javascript animation to be captured
%>
<%= screenshot %>

<h2>Managing feedback questions</h2>

<p>
  Every course can have feedback questions, which are asked after successful submission. Question can be either
  free text answer or number value for selected range.
  For example, numeric questions can be "How difficult was this exercise? (1-5)", and text question
  "What problems you had in this exercise?".
</p>

<p>
  Questions can be configured by clicking 'Manage feedback questions' from course front page.
</p>

<%
  visit '/org/hy/courses/1'
  highlight 'a:contains("Manage feedback questions")'
%>
<%= screenshot %>

<p>
  New question can be added by clicking 'Add question'.
</p>

<%
  click_on 'Manage feedback questions'
  highlight 'a:contains("Add question")'

%>
<%= screenshot %>

<p>
  First enter the actual question text and short title, which can be shown on result view.
  If you want to create free text question, choose 'Text area' as question type.
</p>

<%
  click_on 'Add question'
  fill_in 'feedback_question_question', with: 'What problems you had in this exercise?'
  fill_in 'feedback_question_title', with: 'problems'
  choose('Text area')
  highlight '[value="Create question"]'

%>
<%= screenshot %>
<%
  click_on 'Create question'
%>

<p>
  If you want to create question with number value answers, for example likert scale for statistical purposes,
  you can choose 'Integer range' option instead. New input fiels for minimum and maximum values are shown.
</p>

<%
  visit '/org/hy/courses/1/feedback_questions/new'
  fill_in 'feedback_question_question', with: 'How difficult was this exercise (1-5)?'
  fill_in 'feedback_question_title', with: 'difficulty'
  choose('Integer range')
  fill_in 'intrange_min', with: '1'
  fill_in 'intrange_max', with: '5'

  highlight '[value="Create question"]'
%>
<%= screenshot %>
<%
  click_on 'Create question'
%>

<p>
  When questions are made, you can adjust their order with 'Up' and 'Down' options. Question can be removed
  by clicking 'Delete'.
</p>

<%
  visit '/org/hy/courses/1/feedback_questions/'
  highlight 'a:contains("Up")'
  highlight 'a:contains("Down")'
  highlight 'a:contains("Delete")'

%>
<%= screenshot %>

<p>
  After students have answered to questions, the answers can be viewed by clicking 'View feedback' from
  course main page.
</p>

<%
  visit '/org/hy/courses/1/'
  highlight 'a:contains("View feedback")'
%>
<%= screenshot %>

  <h2>Checking points and students progression</h2>

  <p>
    Students current progress can be check from the points page. It is accessible through 'View points' link from
    the course front page.
  </p>

<%
   visit '/org/hy/courses/1/'
   highlight 'a:contains("View points")'
%>
<%= screenshot %>

  <p>
    This page show summary of all students and exercise groups. If you want to see single student's data, click his
    username.
  </p>

<%
   click_on 'View points'
   highlight 'a:contains("student")'
%>
<%= screenshot %>

  <p>
    On the student's page you can see summary of his progress in all courses, for example how many percentages of
    all exercises have been completed. At the bottom of the page there's list of his submission history. If you want
    to check some single submission data, you can click 'Details' link.
  </p>

<%
   click_on 'student'
   highlight 'a:contains("Details")'
%>
<%= screenshot %>

  <p>
    On the submission details page you can see all relevant data to submission, including student's answers,
    test results, and suggested solution. You can also rerun submission and start code review.
  </p>

<%
   click_on 'Details'
%>
<%= screenshot %>

  <h2>Viewing organization's statistics</h2>

  <p>
    From the organization front page you can view some statistics by clicking link 'Show statistics'.
  </p>

<%
   visit '/org/hy/'
   highlight 'a:contains("Show statistics")'
%>
<%= screenshot %>

  <p>
    Statistics page lists information about participants and completed exercises for all your organization's courses.
  </p>

<%
   click_on 'Show statistics'
%>
<%= screenshot %>

  <h2>Custom courses</h2>

    <p>
      TMC has support for creating fully customized own courses from scratch, without using offered course templates.
      This option might be disabled on the running TMC server, and may not be supported.
      Normally you don't need to bother with that, and it is for advanced use only.

      <a href="customcourse.html">Guide for custom courses</a> tells the details about the fully custom courses
      with their own exercices etc.
    </p>

</body>
</html>
