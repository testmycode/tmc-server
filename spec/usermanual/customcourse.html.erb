<!DOCTYPE html>
<!-- NOTE: doc/usermanual/pages is autogenerated from spec/usermanual -->
<html>
<head>
  <%
  #TODO: get rid of header/layout duplication
  %>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>TMC webapp user manual - custom course</title>

  <link rel="stylesheet" type="text/css" href="../css/usermanual.css" />
  <link rel="stylesheet" type="text/css" href="../lib/shjs/sh_style.css" />

  <script type="text/javascript" src="../lib/jquery-1.7.1.min.js"></script>
  <script type="text/javascript" src="../lib/shjs/sh_main.min.js"></script>
  <script type="text/javascript" src="../lib/shjs/sh_java.min.js"></script>
  <script type="text/javascript" src="../js/toc.js"></script>

  <script type="text/javascript">
    $(document).ready(function() {
      sh_highlightDocument();
      $('#toc').prepend('<h2>Contents</h2>');
      makeToc($('#toc'));
    });
  </script>
</head>
<body>

<%
require 'cgi' # for escapeHTML
%>

  <%
    teacher = FactoryGirl.create(:user, :login => 'teacher', :password => 'teacher')
    org = FactoryGirl.create(:accepted_organization, name: 'Some organization')
    org.teachers << teacher
    org.save
  %>

  <h1>Tutorial for creating a course from custom repository</h1>

  <div id="toc"></div>

  <h2>Creating a course</h2>

  <p>
    TMC exercises are stored in a <a href="http://git-scm.com/">git</a>
    repository. Although we'll cover the basics here, we highly recommend
    you learn to use git properly, especially if you collaborate with
    other course instructors. We chose it because it's a supremely useful tool
    that saves time and frustration even when working alone.
  </p>

  <p>Let's log in as a teacher of some organization.</p>

  <%
    visit "/org/#{org.slug}"
    fill_in 'session_login', :with => 'teacher'
    fill_in 'session_password', :with => 'teacher'
  %>
  <% highlight '[value="Sign in"]' %>
  <%= screenshot %>
  <%
    click_on 'Sign in'
  %>

  <p>
    Now we can create a new course for our organization.
  </p>

  <% highlight('a:contains("Create New"):first') %>
  <%= screenshot %>
  <% click_on 'Create New' %>

  <p>
    From this page we select to create custom course.
  </p>

  <% highlight('a:contains("Create New Custom Course"):first') %>
  <%= screenshot %>
  <% click_on 'Create New Custom Course' %>

  <p>
    We'll name our course "<%= course_name %>",  give it a title "<%= course_title %>" and we'll also have to give the address
    of the git repository where we'll store the exercises. Also we have to define branch.
    Master branch is good for us.
  </p>

  <%
    fill_in 'course_name', :with => course_name
    highlight '#course_name'
    fill_in 'course_title', :with => course_title
    highlight '#course_title'

    repo_path = ENV['TMC_USERMANUAL_REPO_PATH'] || (ENV['HOME'] + '/tmc-example-repo')
    FileUtils.rm_rf(repo_path)
    FileUtils.mkdir_p(repo_path)
    system(mk_command('git', 'init', '--bare', '-q', repo_path))
    repo_url = 'file://' + repo_path

    fill_in 'course_source_url', :with => repo_url
    highlight '#course_source_url'
    fill_in 'course_git_branch', :with => 'master'
    highlight '#course_git_branch'
  %>

  <p>
    You need to give a remote GIT repository address.
    If you have an existing repository, say on <a href="https://github.com/">GitHub</a>,
    enter its <em>read-only</em> URL as the remote repo.
    In this example we'll pretend the remote repo is at
    <code><%= CGI::escapeHTML(repo_url) %></code>.
  </p>

  <%= screenshot %>
  <%
    click_on 'Add Course'
    wait_until do
      Course.count > 0
    end
    course = Course.last
    expect(course).not_to be_nil
  %>

  <p>
    The course was created successfully.
  </p>

  <%= screenshot %>

  <% workdir = 'tmc-courses/prog101' %>
  <p>
    Now we'll need to add some exercises.
    To do that, we'll need to clone the remote repository, make our changes and push them back,
    as usual with git.
  </p>

  <%
    shell_session = DocGen::ShellSession.new
  %>

  <%
    course_template_homepage = 'https://github.com/testmycode/tmc-course-template'

    @repo_path = @test_tmp_dir + '/fake_remote_repo'
    course_template_repo = @repo_path
    create_bare_repo(@repo_path)

  %>

  <h3>Starting from a template</h3>
  <p>
    We start by cloning the <a href="<%= course_template_homepage %>">course template</a>
    (not to be confused with course templates that exist in TMC webapp),
    which has some useful scripts. We'll name the template repo as the 'template' remote,
    since won't be pushing back to the template. The actual course repo will be the 'origin' remote.
  </p>

  <%=
    shell_session.example do |sh|
      sh.run "git clone --origin template #{course_template_repo} #{workdir}"
      sh.blank_line

      sh.run "cd #{workdir}"
      shell_session.working_dir = workdir
      sh.run "ls"

      sh.blank_line
      sh.run "git remote add origin #{course.source_url}"
    end
  %>

  <p>
    Now we'll push everything we got from the template into 'origin'.
    The <code>-u</code> flag makes the master branch <em>track</em>
    the master branch in 'origin'. This means that whenever we commit to master and push,
    it'll push to 'origin' by default (and not to 'template').
  </p>

  <%=
    shell_session.example do |sh|
      sh.run "git push -u origin master"
    end
  %>

  <p>
    An exercise is just a NetBeans project with some unit tests and
    at least the JUnit and edu-test-utils libraries included.
    We pulled a handy template exercise into <code>private/template_project</code> from the course template.
  </p>

  <%=
    expect(File).to be_directory(shell_session.working_dir + '/private/template_project')
    shell_session.example do |sh|
      sh.run "cd private/template_project; find ."
    end
  %>

  <p>
    It's not advised to copy the template directly but instead use <code>scripts/create-project</code>
    as it automatically also renames the exercise in all relevant NetBeans settings files.
  </p>

  <%=
    shell_session.example do |sh|
      sh.run "scripts/create-project factorial"
      sh.run "ls"
    end
  %>
  <% expect(File).to be_directory("#{workdir}/factorial") %>
  <% expect(File).to be_directory("#{workdir}/factorial/src") %>
  <% expect(File).to be_directory("#{workdir}/factorial/test") %>
  <% expect(File).to be_directory("#{workdir}/factorial/nbproject") %>


  <h3>Writing the exercise</h3>

  <p>
    Now that we have a blank project, we can finally write our test cases and stub class. Open the project in NetBeans and write the following files.
  </p>

  <%
    spec_dir = "#{Rails.root}/spec/usermanual"
    code = {}
    code['Factorial.java'] = File.read("#{spec_dir}/Factorial.java")
    code['FactorialTest.java'] = File.read("#{spec_dir}/FactorialTest.java")
  %>

  <div class="file-name">factorial/src/Factorial.java</div>
  <pre class="java sh_java"><%= CGI::escapeHTML(code['Factorial.java']) %></pre>

  <div class="file-name">factorial/test/FactorialTest.java</div>
  <pre class="java sh_java"><%= CGI::escapeHTML(code['FactorialTest.java']) %></pre>

  <%
    File.open("#{workdir}/factorial/src/Factorial.java", "wb") {|f| f.write(code['Factorial.java']) }
    File.open("#{workdir}/factorial/test/FactorialTest.java", "wb") {|f| f.write(code['FactorialTest.java']) }
  %>

  <p>
    We marked solution code we don't want the student to see with special comments.
    TMC will automatically make two versions of each exercise: a <em>stub</em> version
    that will be given to students and a <em>solution</em> version that will be shown as
    the model solution.
  </p>

  <p>
    The stub version has the parts in begin/end solution tags removed
    and lines starting with <code>// STUB:</code> uncommented. The stub comments are
    mainly useful to avoid the missing return statement compilation error.
    The solution version is effectively the same as the original but has stub and solution
    comments removed.
  </p>

  <p>
    The tmc-netbeans-author plugin is recommended as it provides syntax highlighting
    for all these comments.
  </p>

  <p>Let's commit and push our changes.</p>

  <%=
    shell_session.example do |sh|
      sh.run "git status"
      sh.blank_line
      sh.run "git add --verbose factorial"
      sh.blank_line
      sh.run "git commit -m \"Added factorial exercise.\""
      sh.blank_line
      sh.run "git push"
    end
  %>

  <p>
    The webapp won't react to changes in the repository before you 'refresh' the course.
    This may be inconvenient, but it also somewhat protects against mistakes.
  </p>

  <%
     page.visit(page.current_url)
     click_on 'View status page'
     page.visit(page.current_url)
  %>
  <% highlight('a:contains("Refresh")') %>
  <%= screenshot %>
  <% click_on 'Refresh' %>
  <% course.reload %>

  <p>
    The system now reloads all exercises from the repository and rebuilds its
    internal caches. Any submissions made to previous exercises will survive this process,
    even if the exercise is deleted in the push.
  </p>

  <%= screenshot %>

  <p>
    The exercise should now be available for download and accept submissions either
    from the webapp or from the NetBeans plugin.
  </p>

  <h2>Personalized course progression</h2>

  <p>
    <i>
      Notice that course progression can now be configured from the webapp.
      Configuration from the repository is only loaded initially, and will not change
      after subsequent refreshes.
    </i>
  </p>

  <p>
    TMC can be used to offer courses that may be started at any time.
    To avoid overwhelming the student and to provide a bit of a reward system,
    TMC may be configured to unlock and provide for download a set of new exercises
    only after the student has completed a certain amount of previous exercises.
    In addition, TMC supports imposing a personal deadline such as
    "you must complete this exercise withing one week of unlocking it".
  </p>

  <p>
    Let's assume we have the following exercise directories.
    As per TMC's naming conventions, these define the exercises named <code>part01-first</code> and so forth.
  </p>

  <ul>
    <li><code>part01/first</code></li>
    <li><code>part01/second</code></li>
    <li><code>part02/third</code></li>
    <li><code>part02/fourth</code></li>
  </ul>

  <p>
    To define when an exercise is unlocked, one must write a <code>metadata.yml</code> for the exercise
    or its parent directory. Let's write the following into <code>part02/metadata.yml</code> as an example.
    It will define that the exercises under part02 will only become visible
    after the student has gotten 80% of all possible points under part01, including all possible points from
    part01-first.
    It also says that the exercise shall not unlock before the 12th of June.
  </p>

  <pre>
unlocked_after:
  - 80% of part01
  - 100% of part01-first
  - 2012-06-12
</pre>

  <p>
    Now the IDE plugin will offer part02's exercises for download as soon as all the unlock conditions are met.
    Before that, the student will not see these exercises anywhere in TMC.
  </p>

  <p>
    TMC remembers when an exercise was first unlocked for a student.
    This makes it possible to set personalized deadlines.
    For instance, the following <code>metadata.yml</code> definition sets the deadline
    for the exercise(s) it applies to to be one week after the student has unlocked it,
    but no later than the 12th of July.
  </p>

  <pre>
deadline:
  - unlock + 1 week
  - 2012-07-12
</pre>

  <p>
    If an <code>unlock + ...</code> deadline definition is present,
    exercises will not unlock automatically. Instead, the IDE plugin
    prompts the user to unlock and download the next set of exercises.
    The user may only unlock all possible unlockable exercises at once, not one at a time.
    Students that do not wish to use an IDE may unlock exercises through the web application.
  </p>

  <p>
    The full syntax of unlock conditions and deadlines is documented in the
    <a href="#metadata_yml">metadata.yml reference</a>.
  </p>


  <h1>Reference</h1>

  <h2>Special comments</h2>

  <p>
    Solution code can be demarcated with special comments so it will be removed from
    the version the student gets (the "<em>stub</em>" version).
  </p>

  <ul>
    <li><code>// BEGIN SOLUTION</code> ... <code>// END SOLUTION</code> - will be removed from the stub.</li>
    <li><code>// STUB: </code> ... - will be uncommented in the stub version.</li>
    <li><code>// SOLUTION FILE</code> - files containing this line will be removed from the stub.</li>
    <li><code>/* PREPEND HTML </code> ... <code>*/</code> - puts arbitrary HTML on the solution page. Removed from stub.</li>
  </ul>

  <pre class="java sh_java">
public class Example {
    public int sampleMethod(int a, int b) {
        // BEGIN SOLUTION
        // The student will not see this implementation nor this comment
        // before the model solution is published.
        return a * (b + 3);
        // END SOLUTION
        // STUB: return 0;
    }
}
</pre>

  <pre class="java sh_java">
// SOLUTION FILE
// This file will not be present in the exercise given to the student
// but will be part of the model solution.
public class AnotherExample {
    // ...
}
</pre>

  <p>
    Analogous XML comments will work for <code>.xml</code> and <code>.jsp</code> files:
  </p>

  <ul>
    <li><code>&lt;!-- BEGIN SOLUTION --&gt;</code> ... <code>&lt;!-- END SOLUTION --&gt;</code></li>
    <li><code>&lt;!-- STUB: </code> ... <code>--&gt;</code></li>
    <li><code>&lt;!-- SOLUTION FILE --&gt;</code></li>
  </ul>

  <p>
    The tmc-netbeans-author plugin is recommended as it provides syntax highlighting
    for the special comments (though XML highlighting is not yet supported).
  </p>


  <h2>Configuration files</h2>

  <p>
    TMC can be configured by placing certain files in certain directories.
    There are four kinds of configuration files as listed below, but mostly you only need
    <code>metadata.yml</code> files.
  </p>

  <ul>
    <li><code>metadata.yml</code> - used to configure exercises and groups of exercises</li>
    <li><code>course_options.yml</code> - used to configure the course as a whole</li>
    <li><code>.tmcproject.yml</code> - used to configure the client side IDE plugin</li>
    <li><code>.tmcrc</code> - used to prepare the server side execution environment</li>
  </ul>

  <h3 id="metadata_yml"><code>metadata.yml</code></h3>

  <p>
    <code>metadata.yml</code> may be placed in an exercise directory
    or any other directory, which will cause it to be applied to all
    exercises below that directory. You may also specify defaults
    in a parent directory's <code>metadata.yml</code> and override them
    selectively in subdirectories.
  </p>

  <p>
    <code>metadata.yml</code> may contain directives as in the following example:
  </p>

  <pre class="yaml">
hidden: false
unlocked_after: 80% of exercise1
deadline: 2010-02-15
publish_time: 2010-02-01
returnable: false
gdocs_sheet: week1
solution_visible_after: 2010-02-15
runtime_options: ["-Xss8M"]
valgrind_strategy: fail
code_review_requests_enabled: false
</pre>

  <ul>
    <li><code>hidden</code> hides the exercise from students (and NetBeans).</li>
    <li><code>unlocked_after</code> hides the exercise from a student until the given condition is met. See below for more.</li>
    <li><code>deadline</code> hides the exercise after a given date from students (and NetBeans) and refuses to accept any more submissions. See below for more.</li>
    <li><code>publish_time</code> sets the time the exercise becomes available to students (and NetBeans). If <code>hidden</code> is false then it overrides this.</li>
    <li><code>returnable</code> tells whether to accept submissions for the exercise. By default if the exercise has a non-empty <code>test/</code> directory then it is considered returnable.</li>
    <li><code>gdocs_sheet</code> names the GDocs sheet to which the exercise's points are exported.</li>
    <li><code>solution_visible_after</code> sets when the suggested solution becomes visible to everyone (including those who didn't complete the exercise). Often set to the same value as the deadline.</li>
    <li><code>runtime_options</code> allows you to specify extra JVM options, such as increased stack size</li>
    <li><code>valgrind_strategy</code> allows you to set if valgrind_log will effect points awarded. With <code>fail</code> no points are given if valgrind shows any errors. With anything else valgrind is shown but it doesn't effect points given. Defaults to <code>fail</code>.</li>
    <li><code>code_review_requests_enabled</code> allows you to enable code review button from the IDE (if implemented) by setting this to <code>true</code>. Defaults to <code>false</code>. Not currently enforced by the server.</li>
    <li><code>run_tests_locally_action_enabled</code> allows you to disable run tests locally action from the IDE (if implemented) by setting this to <code>false</code>. Defaults to <code>true</code>.</li>
  </ul>


  <p>
    The <code>unlocked_after</code> and <code>deadline</code> directives may take one or more conditions,
    the forms of which are shown in the following example.
  </p>
  <pre class="yaml">
unlocked_after:
  - exercise foo
  - point foo
  - points foo bar
  - 50% of some-exercise
  - 50% of some-exercise-group
  - 3 points in some-exercise
  - 3 points in some-exercise-group
  - 1 exercise in some-exercise-group
  - 2012-06-12
deadline:
  - unlock + 1 day
  - 2012-07-12
</pre>

  <p>
    If there are multiple unlock conditions, then all of them must be met for the exercise to be unlocked.
    If there are multiple deadline definitions, then the earliest prevails.
  </p>

  <p>
    The full syntax of an <code>unlocked_after</code> condition is as follows.
  </p>

  <ul>
    <li><code>exercise [group] &lt;exercise-or-group&gt;</code></li>
    <li><code>point[s] &lt;list-of-point-names&gt;</code></li>
    <li><code>&lt;N&gt;% [in|of|from] &lt;exercise-or-group&gt;</code></li>
    <li><code>&lt;N&gt; point[s] &lt;exercise-or-group&gt;</code></li>
    <li><code>&lt;N&gt; exercise[s] [in|of|from] &lt;exercise-or-group&gt;</code></li>
    <li><code>&lt;date-or-datetime&gt;</code></li>
  </ul>

  <p>
    The full syntax of a <code>deadline</code> setting is as follows.
  </p>

  <ul>
    <li><code>&lt;date-or-datetime&gt;</code></li>
    <li><code>unlock + &lt;N&gt; [minute[s]|hour[s]|day[s]|week[s]|month[s]|year[s]]</code></li>
  </ul>

  <h3><code>.tmcproject.yml</code></h3>

  <p>
    An exercise directory may contain a <code>.tmcproject.yml</code>. It currently supports one setting,
    <code>extra_student_files</code>, which is a list of (relative paths to) files to be treated roughly as if
    they were in <code>src/</code>. It can be used e.g. to mark test files as meant to be implemented by students.
  </p>

  <p>Example:</p>

  <pre class="yaml">
extra_student_files:
  - test/StudentTest.java</pre>

  <p>
    This causes <code>test/StudentTest.java</code> to be shown as part of the solution.
    Also, the NetBeans plugin would not overwrite the file when the exercise is updated.
  </p>

  <h3><code>.tmcrc</code></h3>

  <p>
    A shell script named <code>.tmcrc</code> may be put in a project directory.
    It is run (actually, sourced) in the sandbox just before the test suite is run.
    Use it e.g. to start <code>Xvfb</code> for GUI tests or set environment variables.
    Note that it is NOT run on the student's machine.
  </p>

  <h3><code>course_options.yml</code></h3>

  <p>
    <code>course_options.yml</code> has to be in the root directory of the
    repository and may contain directives as in the following example:
  </p>

  <pre class="yaml">
  hidden: true
  hide_after: 2010-02-15
  hidden_if_registered_after: 2010-01-01
  locked_exercise_points_visible: false</pre>

  <ul>
    <li><code>hidden</code> hides the course from students (and their NetBeans).</li>
    <li><code>hide_after</code> hides the course after a given date from students (and their NetBeans) and refuses to accept any more submissions.</li>
    <li><code>hidden_if_registered_after</code> hides the course from students (and their NetBeans) who have registered after the given date. After the given date it will also be invisible to unregistered users.</li>
    <li><code>locked_exercise_points_visible</code> tells whether exercises that one has not unlocked are visible on the scoreboard. Defaults to true.</li>
  </ul>

  <h3><code>.tmcnosubmit</code> & <code>.tmcnosnapshot</code></h3>

  <p>
    If <code>.tmcnosubmit</code> is placed in a directory, that directory's contents (recursively)
    will never be submitted to the server nor to snapshots. The file <code>.tmcnosnapshot</code> does
    the same but only for snapshots. Note that these files are not necessary for directories like
    <code>lib/</code> and <code>test/</code>, which are ordinarily not submitted anyway.
  </p>

  <h2>Course-specific configuration</h2>

  <p>
    It is sometimes useful to keep multiple courses in the same repository and have
    the courses only differ in configuration. This can be accomplished by specifying
    course-specific configuration in a 'courses' section, like this:
  </p>
  <pre class="yaml">
courses:
  my-course-no-deadline:
    deadline: null
deadline: 2010-02-15</pre>

  <p>
    The 'courses' section works in both <code>metadata.yml</code> and
    <code>course_options.yml</code> files.
  </p>
  <p>
    A course-specific option always overrides a general option in the same file.
  </p>
  <p>
    Subdirectory options are applied after course-specific options in the parent
    directory have been applied. That means that if <code>parent-dir/metadata.yml</code>
    specifies a course-specific deadline, <code>parent-dir/subdir/metadata.yml</code>
    can still override it with a general non-course-specific setting.
  </p>

  <h2>ProTips</h2>

  <ul>
    <li>
      Don't use a dash ("-") in exercise names. There is a bug related to
      that at the moment, because a dash is used to replace a slash ("/")
      when naming exercises that reside in subdirectories.
    </li>
    <li>
      The
      <a href="http://testmycode.net/edu-test-utils/javadoc/">edu-test-utils minilibrary</a>
      is quite useful (and included in the default exercise template).
      Currently it has a bunch of helpers for testing object-oriented code
      via reflection. Feel free to
      <a href="https://github.com/testmycode/edu-test-utils">contribute</a>.
    </li>
  </ul>


  <footer>
    This page was automatically generated from an acceptance test at <%= Time.now %>.
    <!-- How cool is that? -->
  </footer>

  <%
    # Clean up the fake remote repo
    FileUtils.rm_rf(repo_path)
  %>
</body>
</html>
